{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_GENERAL_SOURCE",
						"type": "DatasetReference"
					},
					"name": "Emp"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_SCDTYPE2_SINK",
						"type": "DatasetReference"
					},
					"name": "empTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_SCDTYPE2_SINK",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_SCDTYPE2_SINK",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedIsActive"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "ExstingRows"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empdi as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Emp",
				"source(output(",
				"          empdi as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> empTable",
				"Emp derive(IsActive = 1) ~> derivedIsActive",
				"empTable select(mapColumn(",
				"          SQL_empdi = empdi,",
				"          SQL_empname = empname,",
				"          SQL_gender = gender,",
				"          SQL_country = country,",
				"          SQL_IsActive = IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"Emp, select1 lookup(empdi == SQL_empdi,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_empdi)) ~> ExstingRows",
				"ExstingRows select(mapColumn(",
				"          SQL_empdi,",
				"          SQL_empname,",
				"          SQL_gender,",
				"          SQL_country,",
				"          SQL_IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQL_IsActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1 == 1)) ~> alterRow1",
				"derivedIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empdi as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empdi,",
				"          empname,",
				"          gender,",
				"          country,",
				"          IsActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empdi as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['empdi'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empdi = SQL_empdi,",
				"          empname = SQL_empname,",
				"          gender = SQL_gender,",
				"          country = SQL_country,",
				"          IsActive = SQL_IsActive",
				"     )) ~> sink2"
			]
		}
	}
}